import time
from neopixel import *
import argparse

# LED strip configuration:
LED_COUNT      = 244      # Number of LED pixels.
LED_PIN        = 18      # GPIO pin connected to the pixels (18 uses PWM!).
#LED_PIN        = 10      # GPIO pin connected to the pixels (10 uses SPI /dev/spidev0.0).
LED_FREQ_HZ    = 800000  # LED signal frequency in hertz (usually 800khz)
LED_DMA        = 10      # DMA channel to use for generating signal (try 10)
LED_BRIGHTNESS = 50     # Set to 0 for darkest and 255 for brightest
LED_INVERT     = False   # True to invert the signal (when using NPN transistor level shift)
LED_CHANNEL    = 0       # set to '1' for GPIOs 13, 19, 41, 45 or 53



if len(sys.argv) != 3:
  print("error on args")
  exit
else:
  speed = int(sys.argv[2])
  module = str(sys.argv[1])
  try:
    m1 = importlib.import_module(module)
  except ImportError as err:
    print("ERROR ON IMPORT")
    exit
# OLD
#NUM_ROWS = 7
#NUM_COLS = 16
NUM_ROWS = 19
NUM_COLS = 22

#define a list of valid pixels (note this is longer but it is required to be addressable)
pixels = neopixel.NeoPixel(board.D18, 244, brightness =0.1, auto_write = False)

#matrix of actual addressable pixels
maskMatrix = [[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],
[-1,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16],
[-1,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],
[-1,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46],
[-1,-1,61,62,63,64,65,66,67,68,69,70,71,72,73,-1],
[-1,-1,85,84,83,82,81,80,79,78,77,76,75,74,-1,-1],
[-1,-1,86,87,88,89,90,91,92,93,94,95,96,97,-1,-1]]

guitarMap = [
[-1,-1,243,242,241,240,239,238,237,236,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,227,228,229,230,231,232,233,234,235,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,226,225,224,223,222,221,220,219,218,217,216,215,-1,-1,-1,-1,214,213,212,211,210],
[-1,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209],
[-1,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168],
[-1,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167],
[-1,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126],
[-1,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],
[100,101,102,103,104,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[99,98,97,96,95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[90,91,92,93,94,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[89,88,87,86,85,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[80,81,82,83,84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[79,78,77,76,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[70,71,72,73,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,-1,-1,-1,-1],
[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1],
[33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,-1,-1,-1,-1],
[-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,-1,-1,-1,-1]
]





#start all off
#print("test")
#pixels.fill((0,255,0))

frames = len(m1.ledarray)/7

while True:
  for frame in range(0,int(frames)):
    for led_pos in range(0, 112):
      row = int(led_pos / NUM_COLS)
      col = int(led_pos % NUM_COLS)

      if maskMatrix[row][col] != -1:
        idx = maskMatrix[row][col]

        colorHex = m1.ledarray[row+(7*frame)][col]

        b = colorHex % 256
        g = int( ((colorHex-b)/256) % 256 )      # always an integer
        r = int( ((colorHex-b)/256**2) - g/256 ) # ditto

        pixels[idx] = (r,g,b)
    pixels.show()
    time.sleep(1/speed)
    print ("TEST")
